generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  email       String      @unique
  password    String
  name        String?
  avatarUrl   String?
  dateOfBirth DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  bio         String?
  location    String?
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follows[]   @relation("following")
  following   Follows[]   @relation("follower")
  references  Reference[]
  // sentMessages     Message[]                 @relation("Sender")
  // receivedMessages Message[]                 @relation("Receiver")
  // rooms            RoomParticipant[]
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String      @db.ObjectId
  likes      Like[]
  comments   Comment[]
  image      String?
  tags       Tag[]
  theme      Theme       @relation(fields: [themeId], references: [id])
  themeId    String      @db.ObjectId
  references Reference[]
  createdAt  DateTime    @default(now())
}

model Reference {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Tag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Theme {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  posts Post[]
}

//
// model Message {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   sender     User     @relation("Sender", fields: [senderId], references: [id])
//   senderId   String   @db.ObjectId
//   receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
//   receiverId String   @db.ObjectId
//   message    String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   room       Room     @relation(fields: [roomId], references: [id])
//   roomId     String   @db.ObjectId
// }
//
// model Room {
//   id          String             @id @default(auto()) @map("_id") @db.ObjectId
//   participants RoomParticipant[]
//   messages     Message[]
//   createdAt    DateTime           @default(now())
//   updatedAt    DateTime           @updatedAt
// }
//
// model RoomParticipant {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   roomId    String  @db.ObjectId
//   userId    String  @db.ObjectId
//   room      Room    @relation(fields: [roomId], references: [id])
//   user      User    @relation(fields: [userId], references: [id])
// }
