generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  email            String       @unique
  password         String
  name             String?
  avatarUrl        String?
  dateOfBirth      DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  bio              String?
  location         String?
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  followers        Follows[]    @relation("following")
  following        Follows[]    @relation("follower")
  sentMessages     Message[]    @relation("sender")
  receivedMessages Message[]    @relation("receiver")
  conversation     Conversation @relation("participant", fields: [conversationId], references: [id])
  conversationId   String       @db.ObjectId
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  sender         User         @relation("sender", fields: [senderId], references: [id])
  senderId       String       @db.ObjectId
  receiver       User         @relation("receiver", fields: [receiverId], references: [id])
  receiverId     String       @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  participants User[]    @relation("participant")
  messages     Message[]
  createdAt    DateTime  @default(now())
}
